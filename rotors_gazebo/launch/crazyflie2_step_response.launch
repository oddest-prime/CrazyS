<?xml version="1.0"?>
<launch>
  <arg name="mav_name" default="crazyflie2"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="enable_state_estimator" default="false" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="swarm_params" default="swarm_params"/>
  <arg name="waypoints" default="step_x"/>
  <!--arg name="waypoints" default="step_multiple"/-->
  <arg name="paused" value="true"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="false"/>
  <arg name="csvFilesStoring" default="yes"/>
  <arg name="csvFilesStoringTime" default="30.0"/> <!-- seconds -->
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <!-- The following lines simulate the world in Gazebo. The physic engine properties
        are set up in the file "basic_crazyflie.world" file -->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name)_crazyflie_large.world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <group ns="$(arg mav_name)_0">
  <!-- The following lines simulate the Crazyflie dynamics -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav_crazyflie.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="namespace" value="$(arg mav_name)_0" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="enable_state_estimator" value="$(arg enable_state_estimator)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>
   <!-- The Crazyflie position controller -->
   <node name="position_controller_light" pkg="rotors_control" type="position_controller_light" output="screen">
      <param name="enable_state_estimator" value="$(arg enable_state_estimator)" />
      <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
      <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
      <param name="droneCount" value="1"/>
      <param name="droneNumber" value="0"/>
      <rosparam unless="$(arg enable_state_estimator)" command="load" file="$(find rotors_gazebo)/resource/controller_$(arg mav_name).yaml" />
      <rosparam if="$(arg enable_state_estimator)" command="load" file="$(find rotors_gazebo)/resource/controller_$(arg mav_name)_with_stateEstimator.yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name)_$(arg swarm_params).yaml" />
   </node>
   <node name="swarm_controller" pkg="rotors_control" type="swarm_controller" output="screen">
     <param name="csvFilesStoring" value="$(arg csvFilesStoring)"/>
     <param name="csvFilesStoringTime" value="$(arg csvFilesStoringTime)"/>
      <param name="droneCount" value="1"/>
      <param name="droneNumber" value="0"/>
      <param name="obstacleScenario" value="0"/>
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name)_$(arg swarm_params).yaml" />
   </node>

   <node name="waypoint_publisher_csv" pkg="rotors_gazebo" type="waypoint_publisher_csv" required="true" output="screen" args="$(find rotors_gazebo)/waypoints/waypoints_$(arg waypoints).txt"/>
 />

   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
   <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
   <node name="quaternion_to_rpy" pkg="rotors_gazebo" type="quaternion_to_rpy" output="screen" >
       <remap from="odometry" to="odometry_sensor1/odometry" />
   </node>

  </group>
</launch>
